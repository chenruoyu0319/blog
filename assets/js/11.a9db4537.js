(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{272:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"docker-中使用-dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-中使用-dockerfile","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker 中使用 Dockerfile")]),e._v(" "),t("p",[e._v("Dockerfile 是一个文件，其包含了一条条的指令（instruction），每一条指令构建一层，因此每一条指令的内容就是描述该层应当如何构建")]),e._v(" "),t("ul",[t("li",[e._v("构建一个镜像")])]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("FROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n")])])]),t("h2",{attrs:{id:"构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建","aria-hidden":"true"}},[e._v("#")]),e._v(" 构建")]),e._v(" "),t("h3",{attrs:{id:"命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令","aria-hidden":"true"}},[e._v("#")]),e._v(" 命令")]),e._v(" "),t("h4",{attrs:{id:"from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from","aria-hidden":"true"}},[e._v("#")]),e._v(" FROM")]),e._v(" "),t("p",[e._v("用于指定基础镜像，必备的指令，必须是第一条")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("FROM scratch")])])]),e._v(" "),t("p",[t("code",[e._v("scratch")]),e._v("是一个特殊的镜像，表示一个空白的镜像，意味着不以任何镜像为基础，接下来的指令作为第一层")]),e._v(" "),t("h4",{attrs:{id:"run"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run","aria-hidden":"true"}},[e._v("#")]),e._v(" RUN")]),e._v(" "),t("p",[t("code",[e._v("RUN")]),e._v(" 指令是用来执行命令的，格式有两种：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("shell")]),e._v(" 格式:"),t("code",[e._v("RUN <命令>")])])]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n")])])]),t("ul",[t("li",[t("code",[e._v("exec")]),e._v("格式："),t("code",[e._v('RUN ["可执行文件", "参数1", "参数2"]')])])]),e._v(" "),t("p",[e._v("每一个 "),t("code",[e._v("RUN")]),e._v(" 命令都会构建一层，应当减少不必要的构建")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FROM debian:jessie\n\nRUN apt-get update\nRUN apt-get install -y gcc libc6-dev make\nRUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz"\nRUN mkdir -p /usr/src/redis\nRUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\nRUN make -C /usr/src/redis\nRUN make -C /usr/src/redis install\n')])])]),t("p",[e._v("这样会构建7层，会提交大量的无用的改动，应当改为：")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("FROM debian:jessie\n\nRUN buildDeps='gcc libc6-dev make' \\\n    && apt-get update \\\n    && apt-get install -y $buildDeps \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\" \\\n    && mkdir -p /usr/src/redis \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove $buildDeps\n  \n")])])]),t("p",[t("code",[e._v("Dockerfile")]),e._v(" 支持在 Shell 行尾添加 "),t("code",[e._v("\\")]),e._v("的命令换行方式，以及行首添加 "),t("code",[e._v("#")]),e._v(" 进行注释")]),e._v(" "),t("h3",{attrs:{id:"执行构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行构建","aria-hidden":"true"}},[e._v("#")]),e._v(" 执行构建")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("docker build -t myubuntu:v2\n")])])]),t("p",[e._v("这样就能构建一个名为"),t("code",[e._v("myubuntu")]),e._v(", 标签为"),t("code",[e._v("v2")]),e._v("的镜像")]),e._v(" "),t("ul",[t("li",[e._v("从 Git Repo 构建")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("docker build https://github.com/test/test.git"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#:test")]),e._v("\n")])])]),t("p",[e._v("这样就会在 "),t("code",[e._v("git clone")]),e._v(" 之后就会切换到"),t("code",[e._v("master")]),e._v("分支，进入到 "),t("code",[e._v("test")]),e._v("目录执行构建")]),e._v(" "),t("ul",[t("li",[e._v("用压缩包构建")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("docker build http://server/context.tar.gz\n")])])]),t("h4",{attrs:{id:"copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copy","aria-hidden":"true"}},[e._v("#")]),e._v(" COPY")]),e._v(" "),t("p",[e._v("用于将构建上下文目录中的源文件复制到新的一层镜像内的目标路径位置\n格式：")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('COPY <源路径> ... <目标路径>\nCOPY ["<源路径1>", "<目标路径>"]\n')])])]),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("COPY package.json /usr/src/app/\nCOPY home* /mydir\nCOPY home?.txt /mydir\n")])])]),t("p",[t("code",[e._v("<目标路径>")]),e._v(" 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作路径可以通过"),t("code",[e._v("WORKDIR")]),e._v(" 指定）")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("COPY")]),e._v(" 指令，源文件的各种源数据都会被保留，比如读、写、执行权限。文件变更时间等")]),e._v(" "),t("h4",{attrs:{id:"add"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add","aria-hidden":"true"}},[e._v("#")]),e._v(" ADD")]),e._v(" "),t("p",[e._v("用于文件复制，和"),t("code",[e._v("COPY")]),e._v("一样，但是"),t("code",[e._v("<源路径>")]),e._v("可以是个URL，Docker 会将下载链接的文件放到"),t("code",[e._v("<目标路径>")]),e._v("中，文件权限为 600，如果"),t("code",[e._v("<源路径>")]),e._v("是一个 tar 文件，压缩格式为 "),t("code",[e._v("gzip")]),e._v(","),t("code",[e._v("bzip2")]),e._v(","),t("code",[e._v("xz")]),e._v("的情况下会自动解压该文件到"),t("code",[e._v("<目标路径>")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /usr/src/\n")])])]),t("h4",{attrs:{id:"cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmd","aria-hidden":"true"}},[e._v("#")]),e._v(" CMD")]),e._v(" "),t("p",[e._v("容器启动命令，指令格式和"),t("code",[e._v("RUN")]),e._v("相似：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("shell")]),e._v("格式："),t("code",[e._v("CMD <命令>")])]),e._v(" "),t("li",[t("code",[e._v("exec")]),e._v("格式："),t("code",[e._v('CMD ["可执行文件", "参数1", "参数2", ...]')]),e._v("，这类格式在执行的时候会被解析为"),t("code",[e._v("JSON")]),e._v("格数组，因此需要用双引号")])]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('CMD echo $HOME\nCMD ["sh", "-c", "echo $HOME"]\n\nCMD nginx -g daemon off\nCMD ["nginx", "-g", "daemon off"]\n')])])]),t("h4",{attrs:{id:"entrypoint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint","aria-hidden":"true"}},[e._v("#")]),e._v(" ENTRYPOINT")]),e._v(" "),t("p",[t("code",[e._v("ENTRYPOINT")]),e._v("的格式和目的和"),t("code",[e._v("CMD")]),e._v("一样，都是在指定容器启动程序及参数，需要通过 "),t("code",[e._v("docker run --entrypoint")]),e._v("来指定；区别在于 "),t("code",[e._v("ENTRYPOINT")]),e._v("可以接收外部命令传入的参数作为内部命令的参数使用")]),e._v(" "),t("p",[e._v("当指定了"),t("code",[e._v("ENTRYPOINT")]),e._v("后，"),t("code",[e._v("CMD")]),e._v("不再是直接的运行其命令，而是将"),t("code",[e._v("CMD")]),e._v("的内容作为参数传给"),t("code",[e._v("ENTRYPOINT")])]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<ENTRYPOINT> "<CMD>"\n')])])]),t("h4",{attrs:{id:"env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#env","aria-hidden":"true"}},[e._v("#")]),e._v(" ENV")]),e._v(" "),t("p",[e._v("用于设置环境变量，格式有两种：")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ENV <key> <value>\nENV <key1>=<value1> <key2>=<value2>\n")])])]),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ENV NODE_VERSION 7.2.0\nRUN echo $NODE_VERSION\n")])])]),t("p",[t("code",[e._v("ENV")]),e._v("可以在"),t("code",[e._v("ADD")]),e._v(","),t("code",[e._v("COPY")]),e._v(","),t("code",[e._v("ENV")]),e._v(", "),t("code",[e._v("EXPOSE")]),e._v(","),t("code",[e._v("LABEL")]),e._v(","),t("code",[e._v("USER")]),e._v(","),t("code",[e._v("WORKDIR")]),e._v(", "),t("code",[e._v("VOLUME")]),e._v(","),t("code",[e._v("STOPSIGNAL")]),e._v(", "),t("code",[e._v("ONBUILD")])]),e._v(" "),t("h4",{attrs:{id:"arg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arg","aria-hidden":"true"}},[e._v("#")]),e._v(" ARG")]),e._v(" "),t("p",[e._v("构建参数，和"),t("code",[e._v("ENV")]),e._v("的效果一样，都是设置环境变量，但是"),t("code",[e._v("ARG")]),e._v("所设置的环境变量在容器运行时不存在\n格式："),t("code",[e._v("ATG <参数名>[=<默认值>]")]),e._v("\n默认值可以通过"),t("code",[e._v("docker build --build-arg <参数名>=<值>")])]),e._v(" "),t("h4",{attrs:{id:"volume"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volume","aria-hidden":"true"}},[e._v("#")]),e._v(" VOLUME")]),e._v(" "),t("p",[e._v("用于指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据")]),e._v(" "),t("p",[e._v("格式：")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('VOLUME ["<路径1>","<路径2>"]\nVOLUME <路径>\n')])])]),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("VOLUME /data\n")])])]),t("p",[e._v("运行时可以覆盖这个挂载设置：")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker run -d -v mydata:/data\n")])])]),t("p",[e._v("这样就使用 "),t("code",[e._v("mydata")]),e._v("这个命名卷挂载到 "),t("code",[e._v("/data")]),e._v("这个位置，替代了在 "),t("code",[e._v("Dockerfile")]),e._v("中定义的匿名卷的挂载配置")]),e._v(" "),t("h4",{attrs:{id:"expose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expose","aria-hidden":"true"}},[e._v("#")]),e._v(" EXPOSE")]),e._v(" "),t("p",[e._v("用于声明运行时容器提供服务端口，仅仅是一个声明，并不会直接开启端口的服务，用于帮助使用者理解镜像服务的守护端口，同时用于在运行时使用端口随机映射"),t("code",[e._v("docker run -P")]),e._v("时使用"),t("code",[e._v("EXPOSE")]),e._v("配置的端口")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("EXPOSE <端口1> [<端口2> ...]\n")])])]),t("h4",{attrs:{id:"workdir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#workdir","aria-hidden":"true"}},[e._v("#")]),e._v(" WORKDIR")]),e._v(" "),t("p",[e._v("用来指定工作目录（当前目录），以后各层的当前目录就被改为指定目录，如果目录不存在，会直接生成该目录")]),e._v(" "),t("p",[e._v("格式为："),t("code",[e._v("WORKDIR <工作目录路径>")])]),e._v(" "),t("h4",{attrs:{id:"user"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#user","aria-hidden":"true"}},[e._v("#")]),e._v(" USER")]),e._v(" "),t("p",[t("code",[e._v("USER")]),e._v("和"),t("code",[e._v("WORKDIR")]),e._v("相似，都是改变环境状态并影响以后的层，"),t("code",[e._v("WORKDIR")]),e._v("改变的是工作目录，"),t("code",[e._v("USER")]),e._v("改变之后执行"),t("code",[e._v("RUN")]),e._v(","),t("code",[e._v("CMD")]),e._v(","),t("code",[e._v("ENTRYPOINT")]),e._v("之类命令的身份，"),t("code",[e._v("USER")]),e._v("只是切换到指定用户，该用户必须事先建立好")]),e._v(" "),t("p",[e._v("格式："),t("code",[e._v("USER <用户名>")])]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("RUN groupadd -r redis && useradd -r -g redis redis\nUSER redis\nRUN ['redis-server']\n")])])]),t("h4",{attrs:{id:"healthcheck"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck","aria-hidden":"true"}},[e._v("#")]),e._v(" HEALTHCHECK")]),e._v(" "),t("p",[e._v("用来告诉 Docker 如何判断容器的状态是否正常\n格式：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("HEALTHCHECK [选项] CMD <命令>")]),e._v("：设置检查容器健康状况的命令")]),e._v(" "),t("li",[t("code",[e._v("HEALTHCHECK NONE")]),e._v("：如果基础镜像有健康检查指令，使用该命令可以屏蔽")])]),e._v(" "),t("p",[t("code",[e._v("HEALTHCHECK")]),e._v("支持下列选项：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("--interval=<间隔>")]),e._v("：两次健康检查的间隔，默认为30s")]),e._v(" "),t("li",[t("code",[e._v("timeout=<时长>")]),e._v("：健康检查命令运行超时时间，如果超过这个时间则被认为此次健康检查失败")]),e._v(" "),t("li",[t("code",[e._v("--retries=<时长>")]),e._v("：当连续失败指定次数后，则将容器状态视为"),t("code",[e._v("unhealthy")]),e._v("，默认3次")])]),e._v(" "),t("p",[t("code",[e._v("HEALTHCHECK")]),e._v("只可以出现一次，如果写了多个，则只有最后一个生效；\n在"),t("code",[e._v("HEALTHCHECK [选项] CMD")]),e._v(" 后面的命令，格式和"),t("code",[e._v("ENTRYPOINT")]),e._v("一样，分为 "),t("code",[e._v("shell")]),e._v("和"),t("code",[e._v("exec")]),e._v("格式，命令的返回值决定了改次检查的成功与否，"),t("code",[e._v("0")]),e._v(":成功，"),t("code",[e._v("1")]),e._v(":失败，"),t("code",[e._v("2")]),e._v(": 保留")]),e._v(" "),t("p",[e._v("检查web服务是否可用：")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("FROM nginx\nRUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*\nHEALTHCHECK --interval=5s --timeout=3s \\\nCMD curl -fs http://localhost/ || exit 1\n")])])]),t("p",[e._v("构建并启动该容器，查看其状态：")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("docker build -t myweb:v1\ndocker run -d --name web -p 80:80 myweb:v1\n")])])]),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v("\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n03e28eb00bd0 myweb:v1 "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nginx -g \'daemon off"')]),e._v(" 3 seconds ago Up 2 seconds "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("health: starting"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" 80/tcp, 443/tcp web\n\n$ docker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v("\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n03e28eb00bd0 myweb:v1 "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nginx -g \'daemon off"')]),e._v(" 18 seconds ago Up 16 seconds "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("healthy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" 80/tcp, 443/tcp web\n")])])]),t("h4",{attrs:{id:"obuild"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#obuild","aria-hidden":"true"}},[e._v("#")]),e._v(" OBUILD")]),e._v(" "),t("p",[e._v("用于构建下一级镜像时执行，当前镜像并不执行，可用看做通用的构建步骤，在之后的镜像构建中执行")]),e._v(" "),t("p",[e._v("格式 ："),t("code",[e._v("ONBUILD <其他指令>")])]),e._v(" "),t("p",[e._v("构建当前镜像为基础镜像，后续镜像依赖该基础镜像，不需要重复写配置：\n当前项目配置：")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FROM node:slim\nRUN mkdir /app\nWORKDIR /app\nONBUILD COPY ./package.json /app\nONBUILD RUN [ "npm", "install" ]\nONBUILD COPY . /app/\nCMD [ "npm", "start" ]\n')])])]),t("p",[e._v("构建")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("docker build -t my-node\n")])])]),t("p",[e._v("其他项目配置：")]),e._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("FROM my-node\n")])])]),t("p",[t("code",[e._v("npm install")]),e._v(","),t("code",[e._v("COPY . /app/")]),e._v(", "),t("code",[e._v("npm start")]),e._v("会在后续的每一次构建中都执行")])])}],!1,null,null,null);r.options.__file="Docker-中使用-Dockerfile.md";a.default=r.exports}}]);